Crear modelo y migracion:
	php artisan make:model Nota -m

Crear modelo, migracion, factory y para API:
	php artisan make:model Nota -mfr --api
								m -> modelo
								f -> factory
								r -> controlador resource(metodos crud ya creados)
	
Crear solo migracion:
	php artisan make:migration create_alumno_materia_table

migrar:
	php artisan migrate

migrar con seeder:
	php artisan migrate:fresh --seed
	
Crear controlador:
	php artisan make:controller PagesController
	
Relaciones muchos a muchos en el modelo:
	return $this->belongsToMany(Alumno::class, 'alumno_materia');
	
	hasOne
	hasMany
	belongsTo
	
Restriccion clave ajena en la migracion:
	$table->foreignId('materia_id')
            ->nullable()
            ->constrained('materias')
            ->cascadeOnUpdate()
            ->nullOnDelete();
            
Buscar elemento en la BD:
	$materia = Materia::findOrFail($id);
	
Devolver una vista con datos:
	return view('inicio', compact('materia'));
	
Redireccionar despues de crear/editar/borrar:
	return redirect('/')->with('mensaje', 'texto a enviar');

Recuperar el mensaje en la vista:
	@if (session('mensaje'))
	    <div class="alert alert-success">
		{{ session('mensaje') }}
	    </div>
	@endif

Error:
	@error('url')
            <div class="alert alert-danger">
                El enlace es obligatorio
            </div>
        @enderror

Borrar:
	<form class="d-inline" action="{{ route('alumno.borrar', $alumno->id) }}" method="post">
		@method('delete')
		@csrf
		<button class="btn btn-danger btn-sm">Borrar</button>
	    </form>
	
Borrar relacion tabla pivote:
	$alumno->materias()->detach($materiasAll);
Crear relacion tabla pivote:
        $alumno->materias()->attach($materias);
        
Obtener elemento random:
	$categoria = Categoria::inRandomOrder()->first();
	
Crear controlador con metodos para la API:
	php artisan make:controller RestController --resource
	
Iniciar servidro API:
	php artisan serve
	
Filtros:
	-> where('id', '[0-9]+');

Validar:
	$request -> validate([
            'url' => 'required|url',
            'descuento' => 'required',
            'foto' => 'required|image|mimes:jpg',
        ]);


	@extends('plantilla')

	@section('apartado')
		contenido
	@endsection
	
Instale el paquete de interfaz de usuario de Laravel:
	composer require laravel/ui

Instalar la estructura para vue y autenticaci√≥n:
	php artisan ui vue --auth

Para que node instale lo necesario:
	npm install

Compilar css y js:
	npm run dev

Comando falla el anterior:
	npm install --save-dev cross-env

Mostrar rutas creadas
	php artisan route:list